import React, { useState, useEffect } from "react";
import { productService } from "../../services/productService";
import EditProductModal from "../../components/common/EditProductModal";
import { Button, Modal } from "react-bootstrap";

const ManageProducts = () => {
  const [loading, setLoading] = useState(true);
  const [products, setProducts] = useState([]);
  const [query, setQuery] = useState("");
  const [typingTimeout, setTypingTimeout] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [editingProduct, setEditingProduct] = useState(null);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [deletingProduct, setDeletingProduct] = useState(null);

  // üîπ Load s·∫£n ph·∫©m ban ƒë·∫ßu
  useEffect(() => {
    fetchProducts();
  }, []);

  const fetchProducts = async () => {
    try {
      const data = await productService.getAllProducts();
      setProducts(data);
    } catch (error) {
      console.error("L·ªói khi t·∫£i s·∫£n ph·∫©m:", error);
    } finally {
      setLoading(false);
    }
  };

  // üîπ T√¨m ki·∫øm realtime
  const handleSearch = (value) => {
    setQuery(value);
    if (value.trim() === "") {
      fetchProducts();
      return;
    }
    if (typingTimeout) clearTimeout(typingTimeout);
    const timeout = setTimeout(async () => {
      const data = await productService.searchProducts(value);
      setProducts(data);
    }, 400);
    setTypingTimeout(timeout);
  };

  //  M·ªü modal ch·ªânh s·ª≠a
  const handleEdit = (product) => {
    setEditingProduct({ ...product });
    setShowModal(true);
  };

  //  L∆∞u c·∫≠p nh·∫≠t
  const handleSave = async (updatedProduct) => {
    try {
      await productService.updateProduct(updatedProduct._id, updatedProduct);
      alert("‚úÖ C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!");
      setShowModal(false);
      fetchProducts();
    } catch (error) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t:", error);
      alert("‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i!");
    }
  };

  const handleDelete = (product) => {
    setDeletingProduct({ ...product });
    setShowDeleteModal(true);
  };
  const confirmDelete = async () => {
    try {
      await productService.deleteProduct(deletingProduct._id);
      alert(" X√≥a s·∫£n ph·∫©m th√†nh c√¥ng!");
      setShowDeleteModal(false);
      fetchProducts();
    } catch (error) {
      console.error("L·ªói khi x√≥a:", error);
      alert(" X√≥a th·∫•t b·∫°i!");
    }
  };

  if (loading) return <p className="text-center mt-5">ƒêang t·∫£i s·∫£n ph·∫©m...</p>;

  return (
    <div className="container py-4">
      {/* üîπ Header */}
      <div className="d-flex justify-content-between align-items-center mb-4 flex-wrap">
        <div>
          <h1 className="h3 fw-bold text-dark mb-2">üì¶ Qu·∫£n l√Ω s·∫£n ph·∫©m</h1>
          <p className="text-muted small mb-0">
            Xem, t√¨m ki·∫øm v√† qu·∫£n l√Ω to√†n b·ªô s·∫£n ph·∫©m trong kho
          </p>
        </div>

        {/* üîπ Thanh t√¨m ki·∫øm */}
        <div className="position-relative" style={{ minWidth: "280px" }}>
          <input
            type="text"
            className="form-control shadow-sm rounded-pill ps-4 pe-5"
            placeholder=" T√¨m ki·∫øm s·∫£n ph·∫©m..."
            value={query}
            onChange={(e) => handleSearch(e.target.value)}
          />
          {query && (
            <button
              className="btn position-absolute top-50 end-0 translate-middle-y me-2 p-0 border-0 bg-transparent text-muted"
              onClick={() => handleSearch("")}
            >
              ‚úñ
            </button>
          )}
        </div>
      </div>

      {/* üîπ B·∫£ng s·∫£n ph·∫©m */}
      {products.length === 0 ? (
        <p className="text-center text-muted mt-5">
          Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p
        </p>
      ) : (
        <div className="table-responsive shadow-sm rounded-3">
          <table className="table table-hover align-middle mb-0">
            <thead className="table-light">
              <tr>
                <th scope="col">·∫¢nh</th>
                <th scope="col">T√™n s·∫£n ph·∫©m</th>
                <th scope="col">Gi√°</th>
                <th scope="col">T·ªìn kho</th>
                <th scope="col">Tr·∫°ng th√°i</th>
                <th scope="col" className="text-end">
                  H√†nh ƒë·ªông
                </th>
              </tr>
            </thead>
            <tbody>
              {products.map((product) => (
                <tr key={product._id}>
                  <td>
                    <img
                      src={product.images?.[0] || "/no-image.jpg"}
                      alt={product.name}
                      style={{
                        width: "60px",
                        height: "60px",
                        objectFit: "cover",
                        borderRadius: "8px",
                      }}
                    />
                  </td>

                  <td style={{ maxWidth: "250px" }}>
                    <div className="fw-semibold text-dark text-truncate">
                      {product.name}
                    </div>
                    <small className="text-muted text-truncate d-block">
                      {product.description || "Kh√¥ng c√≥ m√¥ t·∫£"}
                    </small>
                  </td>

                  <td className="fw-semibold text-primary">
                    {product.base_price.toLocaleString("vi-VN")}‚Ç´
                  </td>

                  <td>{product.stock_total}</td>

                  <td>
                    <span
                      className={`badge ${
                        product.status === "active"
                          ? "bg-success"
                          : product.status === "out_of_stock"
                          ? "bg-warning text-dark"
                          : "bg-secondary"
                      }`}
                    >
                      {product.status}
                    </span>
                  </td>

                  <td className="text-end">
                    <button
                      className="btn btn-sm btn-outline-primary me-2"
                      onClick={() => handleEdit(product)}
                    >
                      ‚úèÔ∏è S·ª≠a
                    </button>
                    <button
                      className="btn btn-sm btn-outline-danger"
                      onClick={() => handleDelete(product)}
                    >
                      üóëÔ∏è X√≥a
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      {/* üîπ Modal ch·ªânh s·ª≠a (file ri√™ng) */}
      {showModal && editingProduct && (
        <EditProductModal
          show={showModal}
          onHide={() => setShowModal(false)}
          product={editingProduct}
          onSave={handleSave}
        />
      )}

      {/*  Modal x√≥a */}
      <Modal show ={showDeleteModal} onHide={() => setShowDeleteModal(false)} centered>
        <Modal.Header closeButton>
          <Modal.Title>X√°c nh·∫≠n x√≥a s·∫£n ph·∫©m</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s·∫£n ph·∫©m "<strong>{deletingProduct?.name}</strong>" kh√¥ng?</p>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowDeleteModal(false)}>
            H·ªßy
          </Button>
          <Button variant="danger" onClick={confirmDelete}>
            X√≥a
          </Button>
        </Modal.Footer>
      </Modal>

    </div>
  );
};

export default ManageProducts;
