const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const { OAuth2Client } = require("google-auth-library");
const redis = require("../config/redis");
const User = require("../models/User");
const { sendEmail } = require("./notificationService");
const { generateAccessToken, generateRefreshToken } = require("../utils/jwt");

const client = new OAuth2Client(process.env.GOOGLE_CLIENT_ID);
console.log("Redis module path:", require.resolve("../config/redis"));
console.log("Redis type:", typeof redis);
console.log("Redis constructor name:", redis.constructor?.name);
console.log("Redis keys:", Object.keys(redis));


const generateOTP = () => Math.floor(100000 + Math.random() * 900000).toString();

exports.requestOTP = async ({ email, phone, type }) => {
  const identifier = email || phone;
  if (!identifier) throw new Error("Thi·∫øu email ho·∫∑c s·ªë ƒëi·ªán tho·∫°i");

  const otp = generateOTP();

  try {
    console.log("üß© redis type:", typeof redis.setEx);
console.log("üß© redis status:", redis.status);

    await redis.set(`otp:${type}:${identifier}`, otp, "EX", 600);
    console.log(`‚úÖ OTP l∆∞u v√†o Redis cho ${identifier}:`, otp);
  } catch (err) {
    console.error("‚ùå L·ªói khi l∆∞u OTP v√†o Redis:", err.message);
    throw new Error("Kh√¥ng th·ªÉ l∆∞u OTP, vui l√≤ng th·ª≠ l·∫°i");
  }

  try {
    await sendEmail(email, "M√£ OTP X√°c th·ª±c", `M√£ OTP c·ªßa b·∫°n l√† ${otp}`);
  } catch (err) {
    console.error("‚ùå L·ªói khi g·ª≠i email OTP:", err.message);
    throw new Error("Kh√¥ng th·ªÉ g·ª≠i email OTP");
  }

  return { identifier, expiresIn: "10 ph√∫t" };
};
exports.verifyRegister = async ({ email, otp, name, username, password }) => {
  const cachedOtp = await redis.get(`otp:register:${email}`);
  if (!cachedOtp || cachedOtp !== otp) throw new Error("OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n");

  const existing = await User.findOne({ $or: [{ email }, { username }] });
  if (existing) throw new Error("Email ho·∫∑c username ƒë√£ t·ªìn t·∫°i");

  const salt = await bcrypt.genSalt(10);
  const hash = await bcrypt.hash(password, salt);

  const user = await User.create({
    name,
    username,
    email,
    password_hash: hash,
    role_id: "role-customer",
  });

  await redis.del(`otp:register:${email}`);
  return { user };
};

exports.login = async (identifier, password) => {
  const user = await User.findOne({
    $or: [{ email: identifier }, { username: identifier }, { phone: identifier }],
  });
  if (!user) throw new Error("T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i");

  const valid = await bcrypt.compare(password, user.password_hash);
  if (!valid) throw new Error("Sai m·∫≠t kh·∫©u");

  const accessToken = generateAccessToken(user);
  const refreshToken = generateRefreshToken(user);
  user.refresh_token = refreshToken;
  user.last_login = new Date();
  await user.save();

  return { accessToken, refreshToken, user };
};

exports.googleLogin = async (idToken) => {
  const ticket = await client.verifyIdToken({
    idToken,
    audience: process.env.GOOGLE_CLIENT_ID,
  });
  const payload = ticket.getPayload();

  let user = await User.findOne({ email: payload.email });
  if (!user) {
    user = await User.create({
      name: payload.name,
      email: payload.email,
      username: payload.email.split("@")[0],
      avatar_url: payload.picture,
      role_id: "role-customer",
    });
  }

  const accessToken = generateAccessToken(user);
  const refreshToken = generateRefreshToken(user);
  user.refresh_token = refreshToken;
  user.last_login = new Date();
  await user.save();

  return { accessToken, refreshToken, user };
};

exports.resetPassword = async (email, otp, newPassword) => {
  const cachedOtp = await redis.get(`otp:forgot:${email}`);
  if (!cachedOtp || cachedOtp !== otp) throw new Error("OTP kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n");

  const user = await User.findOne({ email });
  if (!user) throw new Error("T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i");

  const isSame = await bcrypt.compare(newPassword, user.password_hash);
  if (isSame) throw new Error("M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë∆∞·ª£c tr√πng m·∫≠t kh·∫©u c≈©");

  const salt = await bcrypt.genSalt(10);
  user.password_hash = await bcrypt.hash(newPassword, salt);
  await user.save();
  await redis.del(`otp:forgot:${email}`);

  return { message: "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i" };
};

exports.changePassword = async (userId, oldPassword, newPassword) => {
  const user = await User.findById(userId);
  if (!user) throw new Error("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng");

  const valid = await bcrypt.compare(oldPassword, user.password_hash);
  if (!valid) throw new Error("M·∫≠t kh·∫©u c≈© kh√¥ng ch√≠nh x√°c");

  const isSame = await bcrypt.compare(newPassword, user.password_hash);
  if (isSame) throw new Error("M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë∆∞·ª£c tr√πng m·∫≠t kh·∫©u c≈©");

  const salt = await bcrypt.genSalt(10);
  user.password_hash = await bcrypt.hash(newPassword, salt);
  await user.save();

  return { message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng" };
};
